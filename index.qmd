---
title: "SONA_NLP_Python"
---

# Introduction

This paper critically analyzes the State of the Nation Address (SONA) speeches delivered by various South African presidents from 1994 to 2023. The primary objective is to categorize each president based on single sentences extracted from their respective SONA speeches. The study unfolds in XXX main sections.

Initially, a concise literature review is presented, with emphasis on the domain of Natural Language Processing (NLP), particularly focusing on classification tasks within NLP. This review lays the groundwork for the methodologies and approaches applied in later sections of the paper.

Subsequent sections offer an in-depth exploration and meticulous cleaning of the data utilized in the study. The exploration phase scrutinizes the dataset's balance and analyzes the vocabulary used, both overall and by each specific president. These preliminary steps are crucial for ensuring the integrity and reliability of the study's findings.

The paper then transitions to a detailed exposition of the methodologies employed in the study. The methods section elucidates the three feature extraction tools deployed: Bag of Words (BoW), Term Frequency-Inverse Document Frequency (TF-IDF), and Word Tokenization. Additionally, it describes the XXX predictive models applied, namely Gradient Boosted Trees, Feed Forward Neural Networks, and Support Vector Machines. Each tool and model is presented with a rationale for its inclusion and an explanation of its contribution to the study's objectives.

Following the methods section, the paper presents and succinctly discusses the study's results. This section provides an initial interpretation of the findings, preparing the ground for the more in-depth analysis that follows.

In the penultimate section, a comprehensive discussion of the results is provided. This discussion delves into the insights gleaned from the findings, offering detailed interpretations and drawing connections with the literature reviewed earlier. This section aims not only to shed light on the study's findings but also to locate these within the broader academic discourse on the subject.

Finally, the paper concludes with a reflective overview of the study as a whole. This concluding section evaluates the study's successes and limitations, reflects on its contributions to the field, and suggests avenues for future research and exploration. Through this reflective lens, the paper not only summarizes its findings but also invites further scholarly engagement with the questions and challenges raised during the study.

# Literature Review

# Methods

The methods applies fall into XXX main categoriis that also follows the workflow of the project. More specifically, data pre-processing, feature extraction, modellinig and model evaluation.

## Data Pre-Processing
In the data preprocessing phase prior to feature extraction, initial data loading was accomplished from text files, with each file containing SONA speeches from different South African presidents from 1994 to 2023. Files were filtered to ensure they were valid, and the president’s names were extracted and cleaned for later use. The speeches within each file were tokenized into sentences using the NLTK library, and any unnecessary newline characters within these sentences were removed. Each sentence was then associated with the relevant president, resulting in a structured data frame containing each sentence alongside its corresponding president’s name. Following this, the data underwent exploratory data analysis (EDA) where sentences associated with specific presidents were filtered out, and sentence lengths were calculated and visualized. The sentences were further cleaned by removing stop words (common words that do not contribute to the meaning of a sentence), and then grouped by president. Subsequently, the cleaned sentences were used for generating word clouds for visual inspection. Furthermore the most common words across all presidents were calculated and the average words per sentence was computed and plotted for each preesident.


## Feature Extraction


### Bag of Words (BoW)
   The Bag of Words (BoW) method represents text data as a matrix of token (typically words) occurrence within a given document. Each row of the matrix corresponds to a document, while each column represents a unique token in the dataset. The matrix cell contains the count of occurrences of the token in the document. In mathematical terms, for a set of  $n$ documents $D$ and a set of $m$ unique tokens $T$, the BoW matrix $M$ is a $n \times m$ matrix where $M_{ij}$ is the frequency of token $j$ in document $i$. For the dataset in question, each sentence from the president’s speeches is treated as a document. The BoW model tokenizes each sentence into words, creating a matrix that reflects the frequency count of each word within each sentence, yielding a sparse matrix representation of the word distribution in each president's speech.

### Term Frequency-Inverse Document Frequency (TF-IDF)
   The Term Frequency-Inverse Document Frequency (TF-IDF) technique assigns a weight to each term in a document reflecting its importance in the document relative to the entire corpus. The TF-IDF value of a term $t$ in a document $d$ within a corpus $D$ is computed as $\text{TF-IDF}(t, d) = \text{TF}(t, d) \times \text{IDF}(t, D)$, where $\text{TF}(t, d)$ is the frequency of term $t$ in document $d$ divided by the total number of terms in $d$, and $\text{IDF}(t, D)$ is the logarithm of the total number of documents in $D$ divided by the number of documents containing term $t$. In the context of the dataset, TF-IDF is calculated for each term in every sentence, resulting in a vector of TF-IDF values for each sentence, thereby emphasizing terms that are distinctive to specific speeches or presidents.

### Word Embeddings
Sentences from the presidential speeches dataset are tokenized into words. These tokens are then fed into the Word2Vec model, which learns vector representations for each word by predicting the context in which a word appears, effectively capturing the semantic relationships between words.Upon training Word2Vec with the tokenized sentences, each word is represented as a high-dimensional vector. To form a representative vector for a complete sentence, the word vectors within each sentence are averaged. This results in a single vector per sentence, encapsulating the semantic essence of the sentence based on its constituent words.

These sentence-level vectors serve as the dataset's numerical features, providing a semantically rich representation of the sentences for subsequent machine learning applications in the project. Each vector not only represents its sentence but also mirrors the inherent semantic structure and relationships within the text, offering a meaningful feature set for analysis.By employing these methods, the raw textual data from the speeches is transformed into a numerical format suitable for training machine learning models, with each technique capturing different aspects and nuances of the data's structure and semantics.

## Modelling 

Note that for each of the following predictive models, each of the three feature extraction methods detailed above are applied.

### Gradient Boosted Trees

Gradient Boosting is a general technique where models are built sequentially, with each new model being trained to correct the mistakes of the combined ensemble of existing models. This process is iteratively repeated, progressively improving the model’s accuracy until further improvements are negligible.

Gradient Boosted Trees (GBTs) inherently leverage an ensemble methodology, combining the predictive power of multiple weak learners, in decision trees, to create a more accurate and robust model. The algorithm incrementally builds an ensemble of trees where each subsequent tree compensates for the errors of the aggregate set of preceding trees. Through this iterative refinement, the algorithm not only enhances its precision but also avoids overfitting, providing a reliable generalization to unseen data.

In our deployment of GBTs, using Yandex's CatBoost, careful parameter tuning was essential for optimized performance. We engaged 500 boosting iterations, a 0.05 learning rate, and a tree depth of 10. The boosting iterations define the number of trees in the model, with each iteration adding a new tree that corrects the errors of the ensemble. The learning rate, alternatively known as shrinkage, moderates the influence of each tree, preventing any single tree from dominating the ensemble prediction. The tree depth, meanwhile, influences the model's complexity, with deeper trees allowing for the capture of more complex patterns in the data but at the risk of overfitting. These parameters were selected after running a grid search over hyperparameters choosing the hyperamters which minimised validation error computed using 5-fold cross validation.

### Support Vector Machines

Support Vector Machines (SVMs) is supervised learning algorithm used for classification tasks. SVMs operate by constructing hyperplanes in a multidimensional space that separates cases of different class labels(). The SVM algorithm is implemented in practice using a kernel. The kernel trick helps in fitting the maximum-margin hyperplane in the transformed feature space. The hyperplane is selected to segregate classes in the best possible way.

In this project, SVM classifiers were employed with various parameter configurations, and their performance was evaluated based on the processed data obtained through the feature extractoin methods previously mentoined.
A grid search approach was utilized to systematically explore a range of parameter values and identify the optimal configuration for each data representation method. The grid search was performed over a range of values for the `C` parameter, different kernel types, and the gamma coefficient for the Radial Basis Function (RBF) kernel. Specifically, the `C` parameter was explored over the values `[0.1, 1, 10]`. The `C` parameter represents the regularization term, controlnig the trade-off between having a smooth decision boundary and classifying the training points correctly. A smaller value of `C` creates a wider margin but may misclassify more points, while a larger `C` aims for correct classification, potentially leading to a more complex model.

The kernel parameter, with values `['linear', 'rbf']`, specifies the type of hyperplane used to separate the data. The linear kernel is often used when the data is linearly separable, meaning it can be separated by a single line. The RBF kernel is used for non-linear data, transforming it into a higher-dimensional space where it becomes linearly separable. The gamma parameter, with values `['scale', 'auto']`, defines how far the influence of a single training example reaches, with low values meaning 'far' and high values meaning 'close'().

For the SVM model trained on data represented using Bag of Words, the grid search identified the optimal parameters to be `C=0.1`, with a `linear` kernel and `gamma='scale'`. When the data was represented using TF-IDF, the optimal SVM model parameters were found to be `C=10`, using an `RBF` kernel with `gamma='scale'`. Finally, for the Word Embeddings representation, the best-performing SVM model utilized a `C` value of `10`, a `linear` kernel, and `gamma='scale'`.

### Neural Networks

The Neural Network (NN) model developed for the classification task is a multilayer perceptron (MLP), which is a type of feedforward neural network. The input data was converted from a sparse to a dense matrix format, as the latter is requisite for the functioning of neural networks. The architecture employed was the same across all feature extractioin methods as varrynig the model architecture did not prove to yield any siignificant differnce in model perrformance across the feature extraction methods. 

The architecture of the NN consists of an input layer, a hidden layer, and an output layer. The input layer has 505 neurons, with the Rectified Linear Unit (ReLU) serving as the activation function. ReLU was chosen due to its effectiveness in mitigating the vanishing gradient problem, which is prevalent in deep networks. For the initialization of weights in the input layer, the He normal initializer was used. This initializer assists in breaking symmetry and facilitating the learning process. Additionally, to avoid the overfitting phenomenon, an L2 regularization term with a coefficient of $1 \times 10^{-8}$ was applied.

The hidden layer, similar to the input layer, uses the ReLU activation function and the He normal initializer, but with 220 neurons. An L2 regularization term with a coefficient of $1 \times 10^{-7}$ was incorporated to constrain the weights, providing a balance between fitting the training data and maintaining model generalization.

The output layer possesses neurons equal to the number of unique labels in the target variable. The softmax activation function is applied in this layer to output a probability distribution over the classes, making it suitable for multi-class classification tasks.

During the training phase, a stratified 5-fold cross-validation strategy was employed. For each fold, the data was split into training and validation subsets, with the model being trained for 20 epochs. The sparse categorical crossentropy was selected as the loss function, being appropriate for multi-class classification problems. The Adam optimizer was utilized for its adaptive learning rate capabilities, facilitating a faster and more stable convergence to the minimum of the loss function. Following examination of the plot of training versus validation accuracy over epochs the optimal number of epochs fro training was set, and the final model was trainined and subsequently evaluated on the unseen test data. 

## Model Evaluation Metrics

The evaluation of the models' performance employed a suite of metrics to ensure a comprehensive assessment. The primary metric used is accuracy, defined as the ratio of correctly predicted observations to the total observations:

$\text{Accuracy} = \frac{\text{Number of Correct Predictions}}{\text{Total Number of Predictions Made}}$

While accuracy is a straightforward and informative metric, it may not be sufficiently descriptive in situations where the classes are imbalanced. For this reason, additional evaluative metrics were incorporated into the assessment framework.

The stratified k-fold cross-validation (with $k = 5$ ) technique used during the training phase of both Support Vector Machines (SVMs) and Neural Networks (NNs) facilitated the calculation of accuracy for both training and validation sets across all folds. The average accuracy computed from these folds provided a robust estimate of each model's generalization performance.

Subsequently, confusion matrices were generated for the models. A confusion matrix is a table used to describe the performance of a classification algorithm. Each row of the matrix represents the instances of the actual class, while each column represents the instances of the predicted class. The entries on the main diagonal of the confusion matrix correspond to correct predictions, whereas other entries reflect the mistakes made by the classifier. Through the confusion matrix, various metrics including precision, recall, and the F1-score were computed to provide a detailed understanding of the model’s performance. Precision (the ratio of true positive predictions to the sum of true positive and false positive predictions), recall (the ratio of true positive predictions to the sum of true positive and false negative predictions), and the F1-score (the harmonic mean of precision and recall) offer deeper insights into the reliability and effectiveness of the models, especially in the presence of class imbalance.

For the Gradient Boosted Trees model, the loss function was an essential aspect of evaluation. The loss function is a measure used to estimate the discrepancy between the predicted values and actual values. During the training process, the algorithm optimizes the model parameters to minimize this loss function, thereby improving the model’s predictive performance. Monitoring the change in the value of the loss function during the training process provides insights into the convergence and stability of the model, helping in understanding whether the model is learning effectively from the training data. For each training epoch, the loss was computed and analyzed to ensure the model was converging to a solution that minimized prediction errors.




```{python}
#| echo: false
#| error: false
#| output: false
#| include: false
pip install nltk requests matplotlib seaborn sklearn scikit-learn wordcloud catboost tensorflow gensim
```

```{python}
#| echo: false
#| error: false
#| output: false
pip install wordcloud
```

```{python}
#| include: false
pip install gensim
```

```{python}
#| include: false
pip install tensorflow==2.14.0
```


```{python}
#| include: false
pip install keras==2.14.0
```

```{python}
#| include: false
pip install joblib
```

```{python}
#| include: false
pip install pickle
```
```{python}
#| include: false
# General imports
import pickle
from joblib import dump, load
import os
import pandas as pd
import re
import numpy as np

# NLTK imports
import nltk
from nltk.tokenize import sent_tokenize
nltk.download('punkt')

# Visualization imports
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud, STOPWORDS

# Preprocessing imports
from sklearn.feature_extraction.text import CountVectorizer, ENGLISH_STOP_WORDS, TfidfVectorizer
from sklearn.preprocessing import LabelEncoder

# Model selection imports
from sklearn.model_selection import train_test_split, GridSearchCV

# Machine learning model imports
from sklearn.svm import SVC
from catboost import CatBoostClassifier
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.regularizers import l2
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
from catboost import Pool, cv, CatBoostClassifier

# Word embedding imports
from gensim.models import Word2Vec

# Metrics import
from sklearn.metrics import classification_report, accuracy_score
```


```{python}
#| echo: false
folder_path = 'speeches'  # Ensure this is your correct folder path
files = os.listdir(folder_path)
files = sorted([file for file in files if os.path.isfile(os.path.join(folder_path, file)) and file.endswith('.txt')])

president_names = []

# Updated regex pattern to handle more cases
pattern = r'_(.+?)\.txt'  # Non-greedy match to get the president name

for file in files:
    match = re.search(pattern, file)
    if match:
        president_name = match.group(1)
        # Remove the "_2" suffix from the president names here
        cleaned_president_name = president_name.replace('_2', '')
        president_names.append(cleaned_president_name)
    else:
        print(f"Warning: No match found in filename: {file}")
        president_names.append('Unknown')  # Placeholder for missing names

# Check the lengths of files and president_names lists
if len(files) != len(president_names):
    print(f"Warning: Number of files ({len(files)}) does not match number of president names ({len(president_names)})")

# Initialize dataframe with appropriate column names
df = pd.DataFrame(columns=['Presidents', 'Sentences'])

# Iterate over all files and extract sentences
for file_index in range(len(files)):
    file_path = os.path.join(folder_path, files[file_index])
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()[2:]  # Adjust if your files have a different structure

    text = ' '.join(lines)
    sentences = sent_tokenize(text)
    cleaned_sentences = [sentence.replace('\n', '') for sentence in sentences]

    current_president = president_names[file_index]
    dftemp = pd.DataFrame({'Presidents': [current_president] * len(cleaned_sentences), 'Sentences': cleaned_sentences})
    df = pd.concat([df, dftemp], axis=0, ignore_index=True)

df.reset_index(drop=True, inplace=True)

# Save the DataFrame to a CSV file
#df.to_csv('finalSentence.csv', index=False)
```


```{python}
#| echo: false
data = pd.read_csv("finalSentence.csv")
```

# Results

# Data Exploration Results
Prior to investigating the models, a preliminary data exploration was conducted to understand the data better. We begin first by plotting number of sentences per preseident to understand the balance of the dataset shown in figure 1. In Figure 2 after dropping presidents XXX and XXX we plot the average seentence length in words per president to understand the complexity of sentence ini length per president. Thereafter a overall word count across all presidents is plotted in figure 3 to investigate the words most used(excluding stopwords). Finally we plot in figure 4 a wordcloud per president to try and understand the nuance of each presidents vocabulary.  


```{python}
#| fig-cap: "Figure 1: Number of Sentences per President"
#| echo: false
#| warning: false
# Set the style of the visualization
sns.set(style="whitegrid")

# Group the data by president and count the number of sentences for each
sentence_counts = data['Presidents'].value_counts()

# Create a bar plot of the number of sentences per president
plt.figure(figsize=(10, 6))
sns.barplot(x=sentence_counts.index, y=sentence_counts.values, palette="viridis")

# Add labels and title
plt.xlabel('Presidents')
plt.ylabel('Number of Sentences')
plt.xticks(rotation=45)
plt.show()


```

```{python}
#| include: false
data = data[data['Presidents'] != ' Motlanthe']
data = data[data['Presidents'] != 'deKlerk']
```

```{python}
#| fig-cap: "Figure 2: Average Sentence Length per President"
#| warning: false
#| echo: false
# Calculate the length in words of each sentence
data['Sentence_Length'] = data['Sentences'].apply(lambda x: len(x.split()))

# Group by president and calculate the average sentence length
average_length = data.groupby('Presidents')['Sentence_Length'].mean().sort_values(ascending=False)

palette = sns.color_palette("viridis", n_colors=len(sentence_counts))

# Create a mapping of president to color based on the order in sentence_counts
color_mapping = {president: palette[i] for i, president in enumerate(sentence_counts.index)}

# Get colors for the presidents in the order of average_length
bar_colors = [color_mapping[president] for president in average_length.index]

# Create a bar plot of the average sentence length per president with consistent colors
plt.figure(figsize=(10, 6))
sns.barplot(x=average_length.index, y=average_length.values, palette=bar_colors)

# Add labels and title
plt.xlabel('Presidents')
plt.ylabel('Average Sentence Length (in words)')
plt.xticks(rotation=45)
plt.show()

```

# Overall top Words used

# Word Cloud per president

```{python}
#| fig-cap: "Figure 4: Word Cloud per President"
#| echo: false
# Define a function to remove stop words from a sentence
def remove_stopwords(sentence):
    words = sentence.split()
    cleaned_words = [word for word in words if word.lower() not in STOPWORDS]
    return ' '.join(cleaned_words)

# Apply the function to remove stop words from each sentence in the DataFrame
data['Cleaned_Sentences'] = data['Sentences'].apply(remove_stopwords)

# Group the cleaned sentences by president
grouped = data.groupby('Presidents')['Cleaned_Sentences'].apply(' '.join).reset_index()

# Initialize a dictionary to store word clouds for each president
wordclouds = {}

# Generate a word cloud for each president
for index, row in grouped.iterrows():
    wordcloud = WordCloud(width=800, height=400, background_color='white').generate(row['Cleaned_Sentences'])
    wordclouds[row['Presidents']] = wordcloud

# Display the word clouds
plt.figure(figsize=(15, 10))
for i, (president, wordcloud) in enumerate(wordclouds.items(), 1):
    plt.subplot(2, 2, i)  # Adjusted subplot arrangement to 2x2 grid
    plt.imshow(wordcloud, interpolation='bilinear')
    plt.title(president)
    plt.axis("off")
plt.show()
```



```{python}
#| echo: false
# Preprocess text data: lowercasing and removing punctuation
data['Processed_Sentences'] = data['Sentences'].str.lower().str.replace('[^\w\s]', '', regex=True)

# Extract relevant columns
text_data = data['Processed_Sentences']
y = data['Presidents']

# Initialize a CountVectorizer for BOW representation with stop words removal
vectorizer = CountVectorizer(lowercase=True, token_pattern=r"(?u)\b\w+\b", stop_words='english')

# Fit and transform the text data
X = vectorizer.fit_transform(text_data)

# Encode the class labels
le = LabelEncoder()
y_encoded = le.fit_transform(y)

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y_encoded, test_size=0.2, random_state=42, stratify=y_encoded)

```


# Boosted Tree CatBoost


Here looks like 56.18 percent accuracy

```{python}
#| echo: false
pool = Pool(data=X_train, label=y_train, cat_features=[])
# Parameters for the CatBoostClassifier
params = {
    'iterations': 3000,          # Number of boosting iterations
    'depth': 5,                # Depth of the trees
    'learning_rate': 0.05,      # Learning rate
    'loss_function': 'MultiClass',  # Objective function
    'random_seed': 42,             # Random seed
    'verbose': 10                   # Output training information every 10 iterations
}

#cv_results = cv(
 #   pool=pool,
 #   params=params,
 #   fold_count=5,  # Number of folds in CV
 #   plot=False,   # Set to True if you want to see the plot of train and test errors during cross-validation
 #   early_stopping_rounds=10
#)

# Save cross-validation results to a CSV file
#cv_results.to_csv('cv_results_over_epochs.csv', index=False)

# Train the model on the full training set and save it
#clf = CatBoostClassifier(**params)
#clf.fit(pool)
#clf.save_model('catboost_BOW.cbm')

# Load the model from the file
loaded_model = CatBoostClassifier()
loaded_model.load_model('catboost_BOW.cbm')

# Make predictions on the testing data
y_pred = loaded_model.predict(X_test)
y_pred_decoded = le.inverse_transform(y_pred.flatten().astype(int))

# Evaluate the classifier
accuracy = accuracy_score(y_test, y_pred.flatten().astype(int))
classification_rep = classification_report(y_test, y_pred.flatten().astype(int), target_names=le.classes_)

# Print the accuracy and classification report
#print(f'Accuracy: {accuracy * 100:.2f}%')
#print('Classification Report:')
#print(classification_rep)

```


```{python}
#| echo: false
# Read the CSV file
new_df = pd.read_csv("cv_results_over_epochs.csv")

# Plotting the mean values for training and validation errors with distinct colors
plt.plot(new_df['iterations'], new_df['train-MultiClass-mean'], label='Training Error', color='b')  # 'b' stands for blue
plt.plot(new_df['iterations'], new_df['test-MultiClass-mean'], label='Validation Error', color='r')  # 'r' stands for red

# Adding title and labels to the plot
plt.title('Training and Validation Error Over Epochs')
plt.xlabel('Epochs (Iterations)')
plt.ylabel('Error')

# Adding legend to the plot
plt.legend()

# Show the plot
plt.show()
```


# Neural Network
Accuracy: 60.41%
```{python}
#| echo: false
import numpy as np
from sklearn.model_selection import StratifiedKFold
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Dense
from tensorflow.keras.regularizers import l2
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

# Convert the sparse matrix to dense matrix as neural network needs dense input
X_train_dense = X_train.toarray()
X_test_dense = X_test.toarray()
seed = 7
np.random.seed(seed)

# Define 5-fold cross-validation
#num_folds = 5
#kfold = StratifiedKFold(n_splits=num_folds, shuffle=True, random_state=seed)

# Initialize variables to store sum of accuracies for each epoch
#sum_train_accuracy = []
#sum_val_accuracy = []

#for train, test in kfold.split(X_train_dense, y_train):
    # Split data into train and validation sets for this fold
 #   X_train_fold, X_val_fold = X_train_dense[train], X_train_dense[test]
 #   y_train_fold, y_val_fold = y_train[train], y_train[test]

    # Define model (adjust as necessary)
  #  model = Sequential([
   #     Dense(505, input_dim=X_train_fold.shape[1], activation='relu', kernel_initializer='he_normal', kernel_regularizer=l2(1e-8)),
   #     Dense(220, activation='relu', kernel_initializer='he_normal', kernel_regularizer=l2(1e-7)),
   #     Dense(len(np.unique(y_train)), activation='softmax')
   # ])
    
    # Compile model (adjust optimizer, loss, and metrics as necessary)
   # model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

    # Train model and store training history
    #history = model.fit(X_train_fold, y_train_fold, validation_data=(X_val_fold, y_val_fold), epochs=20)

    # Append accuracies for each epoch for this fold
    #sum_train_accuracy.append(history.history['accuracy'])
    #sum_val_accuracy.append(history.history['val_accuracy'])

# Compute average accuracies for each epoch
#avg_train_accuracy = np.mean(sum_train_accuracy, axis=0)
#avg_val_accuracy = np.mean(sum_val_accuracy, axis=0)

# Save averaged accuracies to CSV
#avg_accuracies_df = pd.DataFrame({'avg_train_accuracy': avg_train_accuracy, 'avg_val_accuracy': avg_val_accuracy})
#avg_accuracies_df.to_csv('avg_accuracies_over_epochs_NN_1.csv', index=False)

# Load averaged accuracies from CSV
loaded_avg_accuracies = pd.read_csv('avg_accuracies_over_epochs_NN_1.csv')

# Plotting
plt.figure(figsize=(12, 6))
plt.plot(range(1, len(loaded_avg_accuracies['avg_train_accuracy']) + 1), loaded_avg_accuracies['avg_train_accuracy'], label='Average Training Accuracy')
plt.plot(range(1, len(loaded_avg_accuracies['avg_val_accuracy']) + 1), loaded_avg_accuracies['avg_val_accuracy'], label='Average Validation Accuracy', linestyle='dashed')

plt.title('Average Training and Validation Accuracy Over Epochs')
plt.xlabel('Epoch')
plt.xticks(range(1, len(loaded_avg_accuracies['avg_train_accuracy']) + 1))  # Adjust x-axis ticks to start from 1
plt.ylabel('Accuracy')
plt.legend(loc='upper left')
plt.show()
```

Val accurcay 58.80%
```{python}
#| echo: false
X_train = X_train.toarray()
X_test = X_test.toarray()

# Define model
#model = Sequential([
#    Dense(505, input_dim=X_train.shape[1], activation='relu', kernel_initializer='he_normal', kernel_regularizer=l2(1e-8)),  # Input layer
#    Dense(220, activation='relu', kernel_initializer='he_normal', kernel_regularizer=l2(1e-7)),  # Hidden layer
#    Dense(len(label_mapping), activation='softmax')  # Output layer
#])

# Compile model
#model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])


#epochs = 2
#model.fit(X_train, y_train, validation_split=0.2, epochs=epochs)

# Save the final model
#model.save('NN_final_model_1.h5')

# Load the final model
loaded_model = load_model('NN_final_model_1.h5')


# Evaluate the loaded model on the test set
final_loss, final_accuracy = loaded_model.evaluate(X_test, y_test, verbose = 0)
print(f'Test Loss: {final_loss:.4f}')
print(f'Test Accuracy: {final_accuracy*100:.2f}%')
```

## SVM

```{python, eval = FALSE}
#| echo: false
#param_grid = {
#    'C': [0.1, 1, 10],  # Regularization parameter
#    'kernel': ['linear', 'rbf'],  # Type of SVM
#    'gamma': ['scale', 'auto']  # Kernel coefficient
#}

# Initialize the SVM classifier
#svm = SVC(random_state=42)

# Initialize Grid Search
#grid_search = GridSearchCV(estimator=svm, param_grid=param_grid, cv=3, scoring='accuracy')

# Perform Grid Search on the training data
#grid_search.fit(X_train, y_train)

# Get the best parameters and the best estimator from Grid Search
#best_params = grid_search.best_params_
#best_svm_clf = grid_search.best_estimator_

# Make predictions using the best model
#y_pred_best_svm = best_svm_clf.predict(X_test)

# Evaluate the best model
#accuracy_best_svm = accuracy_score(y_test, y_pred_best_svm)
#classification_rep_best_svm = classification_report(y_test, y_pred_best_svm)

#best_params, accuracy_best_svm, classification_rep_best_svm
```


```{python}
#| echo: false
# Initialize the Support Vector Machine classifier
#svm_clf = SVC(kernel='linear', gamma = 'scale', C = 0.1, random_state=42)

# Fit the model on the training data
#svm_clf.fit(X_train, y_train)


# Using pickle
#with open('svm_model1.pkl', 'wb') as model_file:
#    pickle.dump(svm_clf, model_file)

# Using pickle
with open('svm_model1.pkl', 'rb') as model_file:
    loaded_svm_pickle1 = pickle.load(model_file)

# Make predictions on the testing data
y_pred_svm = loaded_svm_pickle1.predict(X_test)

# Evaluate the classifier
accuracy_svm = accuracy_score(y_test, y_pred_svm)
classification_rep_svm = classification_report(y_test, y_pred_svm)

# Print the accuracy and classification report
print(f'test score {accuracy_svm}')
```

# TF-IDF

```{python}
#| echo: false
# Initialize a TfidfVectorizer with stop words removal
vectorizer = TfidfVectorizer(stop_words='english')

# Compute the TF-IDF values for each word in each sentence
X = vectorizer.fit_transform(data['Sentences'])

# Encode the president names as target variable
y = data['Presidents']

# Split the data into training and testing sets with an 80-20 ratio
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

# Display the shapes of the resulting training and testing sets
X_train.shape, X_test.shape, y_train.shape, y_test.shape
```


## Catboost

55.68

```{python}
#| echo: false
# Initialize LabelEncoder
le = LabelEncoder()

# Fit and transform the training data
y_train_encoded = le.fit_transform(y_train)

# Transform the testing data
y_test_encoded = le.transform(y_test)

# Create pool with training data
pool = Pool(data=X_train, label=y_train_encoded, cat_features=[])

# Parameters for CatBoostClassifier
params = {
    'iterations': 3000,
    'depth': 5,
    'learning_rate': 0.05,
    'loss_function': 'MultiClass',
    'random_seed': 42,
    'verbose': 10
}

# Perform cross-validation and save results
#cv_results = cv(
#    pool=pool,
#    params=params,
#    fold_count=5,
#    plot=False,
#    early_stopping_rounds=10
#)

# Save cross-validation results to a CSV file
#cv_results.to_csv('cv_results_over_epochs_2.csv', index=False)

# Train model on full training set and save it
#clf = CatBoostClassifier(**params)
#clf.fit(pool)
#clf.save_model('catboost_TFIDF.cbm')

# Load model from file
loaded_model = CatBoostClassifier()
loaded_model.load_model('catboost_TFIDF.cbm')

# Make predictions on testing data
y_pred = loaded_model.predict(X_test)
y_pred_class = y_pred.flatten().astype(int)

# Inverse transform the predictions back to original labels
y_pred_decoded = le.inverse_transform(y_pred_class)

# Evaluate the classifier using the original (non-encoded) labels
accuracy = accuracy_score(y_test_encoded, y_pred_class)
classification_rep = classification_report(y_test_encoded, y_pred_class, target_names=le.classes_)

# Print accuracy and classification report
print(f'Accuracy: {accuracy * 100:.2f}%')
print('Classification Report:')
print(classification_rep)
```


```{python}
#| echo: false
# Read the CSV file
new_df = pd.read_csv("cv_results_over_epochs_2.csv")

# Plotting the mean values for training and validation errors with distinct colors
plt.plot(new_df['iterations'], new_df['train-MultiClass-mean'], label='Training Error', color='b')  
plt.plot(new_df['iterations'], new_df['test-MultiClass-mean'], label='Validation Error', color='r')  

# Adding title and labels to the plot
plt.title('Training and Validation Error Over Epochs')
plt.xlabel('Epochs (Iterations)')
plt.ylabel('Error')

# Adding legend to the plot
plt.legend()

# Show the plot
plt.show()
```

## SVM


grid search SVM

best params:
10, 'gamma': 'scale', 'kernel': 'rbf'


```{python}
#| echo: false
#param_grid = {
#    'C': [0.1, 1, 10],  # Regularization parameter
#    'kernel': ['linear', 'rbf'],  # Type of SVM
#    'gamma': ['scale', 'auto']  # Kernel coefficient
#}

# Initialize the SVM classifier
#svm = SVC(random_state=42)

# Initialize Grid Search
#grid_search = GridSearchCV(estimator=svm, param_grid=param_grid, cv=3, scoring='accuracy')

# Perform Grid Search on the training data
#grid_search.fit(X_train, y_train)

# Get the best parameters and the best estimator from Grid Search
#best_params = grid_search.best_params_
#best_svm_clf = grid_search.best_estimator_

# Make predictions using the best model
#y_pred_best_svm = best_svm_clf.predict(X_test)

# Evaluate the best model
#accuracy_best_svm = accuracy_score(y_test, y_pred_best_svm)
#classification_rep_best_svm = classification_report(y_test, y_pred_best_svm)

#best_params, accuracy_best_svm, classification_rep_best_svm
```

```{python}
#| echo: false
# Initialize the Support Vector Machine classifier
#svm_clf = SVC(kernel='rbf', gamma = 'scale', C = 10, random_state=42)

# Fit the model on the training data
#svm_clf.fit(X_train, y_train)

#with open('svm_model2.pkl', 'wb') as model_file:
#    pickle.dump(svm_clf, model_file)

# Using pickle
with open('svm_model2.pkl', 'rb') as model_file:
    loaded_svm2_pickle = pickle.load(model_file)

# Make predictions on the testing data
y_pred_svm = loaded_svm2_pickle.predict(X_test)

# Evaluate the classifier
accuracy_svm = accuracy_score(y_test, y_pred_svm)
classification_rep_svm = classification_report(y_test, y_pred_svm)

# Print the accuracy and classification report
accuracy_svm
```



### Neural Net

```{python}
#| echo: false
import numpy as np
from sklearn.model_selection import StratifiedKFold
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Dense
from tensorflow.keras.regularizers import l2
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

# Convert the sparse matrix to dense matrix as neural network needs dense input
X_train_dense = X_train.toarray()
X_test_dense = X_test.toarray()

encoder = LabelEncoder()
y_train = encoder.fit_transform(y_train)
#seed = 7
#np.random.seed(seed)

# Define 5-fold cross-validation
#num_folds = 5
#kfold = StratifiedKFold(n_splits=num_folds, shuffle=True, random_state=seed)

# Initialize variables to store sum of accuracies for each epoch
#sum_train_accuracy = []
#sum_val_accuracy = []

#for train, test in kfold.split(X_train_dense, y_train):
    # Split data into train and validation sets for this fold
#    X_train_fold, X_val_fold = X_train_dense[train], X_train_dense[test]
#    y_train_fold, y_val_fold = y_train[train], y_train[test]

#    model = Sequential([
#        Dense(505, input_dim=X_train_fold.shape[1], activation='relu', kernel_initializer='he_normal', kernel_regularizer=l2(1e-8)),
#        Dense(220, activation='relu', kernel_initializer='he_normal', kernel_regularizer=l2(1e-7)),
#        Dense(len(np.unique(y_train)), activation='softmax')
#    ])
    
#    model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

    # Train model and store training history
#    history = model.fit(X_train_fold, y_train_fold, validation_data=(X_val_fold, y_val_fold), epochs=20)

    # Append accuracies for each epoch for this fold
#    sum_train_accuracy.append(history.history['accuracy'])
#    sum_val_accuracy.append(history.history['val_accuracy'])

# Compute average accuracies for each epoch
#avg_train_accuracy = np.mean(sum_train_accuracy, axis=0)
#avg_val_accuracy = np.mean(sum_val_accuracy, axis=0)

# Save averaged accuracies to CSV
#avg_accuracies_df = pd.DataFrame({'avg_train_accuracy': avg_train_accuracy, 'avg_val_accuracy': avg_val_accuracy})
#avg_accuracies_df.to_csv('avg_accuracies_over_epochs_NN_2.csv', index=False)

# Load averaged accuracies from CSV
loaded_avg_accuracies = pd.read_csv('avg_accuracies_over_epochs_NN_2.csv')

# Plotting
plt.figure(figsize=(12, 6))
plt.plot(range(1, len(loaded_avg_accuracies['avg_train_accuracy']) + 1), loaded_avg_accuracies['avg_train_accuracy'], label='Average Training Accuracy')
plt.plot(range(1, len(loaded_avg_accuracies['avg_val_accuracy']) + 1), loaded_avg_accuracies['avg_val_accuracy'], label='Average Validation Accuracy', linestyle='dashed')

plt.title('Average Training and Validation Accuracy Over Epochs')
plt.xlabel('Epoch')
plt.xticks(range(1, len(loaded_avg_accuracies['avg_train_accuracy']) + 1))  # Adjust x-axis ticks to start from 1
plt.ylabel('Accuracy')
plt.legend(loc='upper left')
plt.show()
```

Test Accuracy: 59.58%
```{python}
#| echo: false
#X_train = X_train.toarray()
#X_test = X_test.toarray()
encoder = LabelEncoder()
y_test = encoder.fit_transform(y_test)
# Define model
#model = Sequential([
#    Dense(505, input_dim=X_train.shape[1], activation='relu', kernel_initializer='he_normal', kernel_regularizer=l2(1e-8)),  # Input layer
#    Dense(220, activation='relu', kernel_initializer='he_normal', kernel_regularizer=l2(1e-7)),  # Hidden layer
#    Dense(len(label_mapping), activation='softmax')  # Output layer
#])

# Compile model
#model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])


#epochs = 2
#model.fit(X_train, y_train, validation_split=0.2, epochs=epochs)

# Save the final model
#model.save('NN_final_model_2.h5')

# Load the final model
loaded_model = load_model('NN_final_model_2.h5')


# Evaluate the loaded model on the test set
final_loss, final_accuracy = loaded_model.evaluate(X_test, y_test, verbose = 0)
print(f'Test Loss: {final_loss:.4f}')
print(f'Test Accuracy: {final_accuracy*100:.2f}%')
```



# Word Embeddings 


```{python}
#| echo: false
# Tokenize sentences using white-space-based tokenization
data['Tokenized_Sentences'] = data['Sentences'].apply(lambda x: x.split())

# Train Word2Vec model
word2vec_model = Word2Vec(sentences=data['Tokenized_Sentences'], vector_size=100, window=5, min_count=1, workers=4)

# Function to calculate sentence embedding
def sentence_embedding(sentence_tokens, model):
    """Calculate sentence embedding as the mean of the word embeddings."""
    embeddings = [model.wv[word] for word in sentence_tokens if word in model.wv.index_to_key]
    return np.mean(embeddings, axis=0) if len(embeddings) > 0 else np.zeros(model.vector_size)

# Create sentence embeddings
data['Sentence_Embeddings'] = data['Tokenized_Sentences'].apply(lambda x: sentence_embedding(x, word2vec_model))

# Encode the "Presidents" labels into numerical format
label_mapping = {label: idx for idx, label in enumerate(data['Presidents'].unique())}
data['Label'] = data['Presidents'].map(label_mapping)

# Split data into features (X) and target (y)
X = np.vstack(data['Sentence_Embeddings'].to_numpy())
y = data['Label'].to_numpy()

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

```


## Catboost
Accuracy: 29.18%
```{python}
#| echo: false
pool = Pool(data=X_train, label=y_train, cat_features=[])
# Parameters for the CatBoostClassifier
params = {
    'iterations': 3000,          # Number of boosting iterations
    'depth': 5,                # Depth of the trees
    'learning_rate': 0.05,      # Learning rate
    'loss_function': 'MultiClass',  # Objective function
    'random_seed': 42,             # Random seed
    'verbose': 10                   # Output training information every 10 iterations
}

#cv_results = cv(
 #   pool=pool,
 #   params=params,
 #   fold_count=5,  # Number of folds in CV
 #   plot=False,   # Set to True if you want to see the plot of train and test errors during cross-validation
  #  early_stopping_rounds=10
#)

# Save cross-validation results to a CSV file
#cv_results.to_csv('cv_results_over_epochs_3.csv', index=False)

# Train the model on the full training set and save it
#clf = CatBoostClassifier(**params)
#clf.fit(pool)
#clf.save_model('catboost_WordEmbed.cbm')

# Load the model from the file
loaded_model = CatBoostClassifier()
loaded_model.load_model('catboost_WordEmbed.cbm')

# Make predictions on the testing data
y_pred = loaded_model.predict(X_test)
y_pred_decoded = le.inverse_transform(y_pred.flatten().astype(int))

# Evaluate the classifier
accuracy = accuracy_score(y_test, y_pred.flatten().astype(int))
classification_rep = classification_report(y_test, y_pred.flatten().astype(int), target_names=le.classes_)

# Print the accuracy and classification report
print(f'Accuracy: {accuracy * 100:.2f}%')
print('Classification Report:')
print(classification_rep)

```

```{python}
#| echo: false
# Read the CSV file
new_df = pd.read_csv("cv_results_over_epochs_3.csv")

# Plotting the mean values for training and validation errors with distinct colors
plt.plot(new_df['iterations'], new_df['train-MultiClass-mean'], label='Training Error', color='b')  
plt.plot(new_df['iterations'], new_df['test-MultiClass-mean'], label='Validation Error', color='r')  

# Adding title and labels to the plot
plt.title('Training and Validation Error Over Epochs')
plt.xlabel('Epochs (Iterations)')
plt.ylabel('Error')

# Adding legend to the plot
plt.legend()

# Show the plot
plt.show()
```

## SVM

```{python, eval = FALSE}
#| echo: false
#param_grid = {
#    'C': [0.1, 1, 10],  # Regularization parameter
#    'kernel': ['linear', 'rbf'],  # Type of SVM
#    'gamma': ['scale', 'auto']  # Kernel coefficient
#}

# Initialize the SVM classifier
#svm = SVC(random_state=42)

# Initialize Grid Search
#grid_search = GridSearchCV(estimator=svm, param_grid=param_grid, cv=3, scoring='accuracy')

# Perform Grid Search on the training data
#grid_search.fit(X_train, y_train)

# Get the best parameters and the best estimator from Grid Search
#best_params = grid_search.best_params_
#best_svm_clf = grid_search.best_estimator_

# Make predictions using the best model
#y_pred_best_svm = best_svm_clf.predict(X_test)

# Evaluate the best model
#accuracy_best_svm = accuracy_score(y_test, y_pred_best_svm)
#classification_rep_best_svm = classification_report(y_test, y_pred_best_svm, target_names=label_mapping.keys())
```

41.26%
```{python}
#| echo: false
# Initialize the Support Vector Machine classifier with specific parameters
#specific_svm_clf = SVC(kernel='linear', gamma='scale', C=10, random_state=42)

# Fit the model on the training data
#specific_svm_clf.fit(X_train, y_train)

#with open('svm_model3.pkl', 'wb') as model_file:
#    pickle.dump(specific_svm_clf, model_file)

# Using pickle
with open('svm_model3.pkl', 'rb') as model_file:
    loaded_svm3_pickle = pickle.load(model_file)

# Make predictions on the testing data
y_pred_specific_svm = loaded_svm3_pickle.predict(X_test)



# Evaluate the classifier
accuracy_specific_svm = accuracy_score(y_test, y_pred_specific_svm)
classification_rep_specific_svm = classification_report(y_test, y_pred_specific_svm, target_names=label_mapping.keys())

# Print the accuracy and classification report
print(f'Accuracy (Specific SVM): {accuracy_specific_svm * 100:.2f}%')
print('Classification Report (Specific SVM):')
print(classification_rep_specific_svm)
```


## Neural Network 
Accuracy: 36.69%

```{python}
#| echo: false
import numpy as np
from sklearn.model_selection import StratifiedKFold
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Dense
from tensorflow.keras.regularizers import l2
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint

# Convert the sparse matrix to dense matrix as neural network needs dense input
#X_train_dense = X_train.toarray()
#X_test_dense = X_test.toarray()

encoder = LabelEncoder()
y_train = encoder.fit_transform(y_train)
#seed = 7
#np.random.seed(seed)

# Define 5-fold cross-validation
#num_folds = 5
#kfold = StratifiedKFold(n_splits=num_folds, shuffle=True, random_state=seed)

# Initialize variables to store sum of accuracies for each epoch
#sum_train_accuracy = []
#sum_val_accuracy = []

#for train, test in kfold.split(X_train_dense, y_train):
    # Split data into train and validation sets for this fold
 #   X_train_fold, X_val_fold = X_train_dense[train], X_train_dense[test]
 #   y_train_fold, y_val_fold = y_train[train], y_train[test]

 #   model = Sequential([
 #       Dense(505, input_dim=X_train_fold.shape[1], activation='relu', kernel_initializer='he_normal', kernel_regularizer=l2(1e-8)),
 #       Dense(220, activation='relu', kernel_initializer='he_normal', kernel_regularizer=l2(1e-7)),
 #       Dense(len(np.unique(y_train)), activation='softmax')
 #   ])
    
#    model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

    # Train model and store training history
 #   history = model.fit(X_train_fold, y_train_fold, validation_data=(X_val_fold, y_val_fold), epochs=20)

    # Append accuracies for each epoch for this fold
 #   sum_train_accuracy.append(history.history['accuracy'])
 #   sum_val_accuracy.append(history.history['val_accuracy'])

# Compute average accuracies for each epoch
#avg_train_accuracy = np.mean(sum_train_accuracy, axis=0)
#avg_val_accuracy = np.mean(sum_val_accuracy, axis=0)

# Save averaged accuracies to CSV
#avg_accuracies_df = pd.DataFrame({'avg_train_accuracy': avg_train_accuracy, 'avg_val_accuracy': avg_val_accuracy})
#avg_accuracies_df.to_csv('avg_accuracies_over_epochs_NN_3.csv', index=False)

# Load averaged accuracies from CSV
loaded_avg_accuracies = pd.read_csv('avg_accuracies_over_epochs_NN_3.csv')

# Plotting
plt.figure(figsize=(12, 6))
plt.plot(range(1, len(loaded_avg_accuracies['avg_train_accuracy']) + 1), loaded_avg_accuracies['avg_train_accuracy'], label='Average Training Accuracy')
plt.plot(range(1, len(loaded_avg_accuracies['avg_val_accuracy']) + 1), loaded_avg_accuracies['avg_val_accuracy'], label='Average Validation Accuracy', linestyle='dashed')

plt.title('Average Training and Validation Accuracy Over Epochs')
plt.xlabel('Epoch')
plt.xticks(range(1, len(loaded_avg_accuracies['avg_train_accuracy']) + 1))  # Adjust x-axis ticks to start from 1
plt.ylabel('Accuracy')
plt.legend(loc='upper left')
plt.show()
```

Test Accuracy: 36.08%
```{python}
#| echo: false
#X_train = X_train.toarray()
#X_test = X_test.toarray()
encoder = LabelEncoder()
y_test = encoder.fit_transform(y_test)
# Define model
#model = Sequential([
 #   Dense(505, input_dim=X_train.shape[1], activation='relu', kernel_initializer='he_normal', kernel_regularizer=l2(1e-8)),  # Input layer
 #   Dense(220, activation='relu', kernel_initializer='he_normal', kernel_regularizer=l2(1e-7)),  # Hidden layer
  #  Dense(len(label_mapping), activation='softmax')  # Output layer
#])

# Compile model
#model.compile(loss='sparse_categorical_crossentropy', optimizer='adam', metrics=['accuracy'])


#epochs = 3
#model.fit(X_train, y_train, validation_split=0.2, epochs=epochs)

# Save the final model
#model.save('NN_final_model_3.h5')

# Load the final model
loaded_model = load_model('NN_final_model_3.h5')


# Evaluate the loaded model on the test set
final_loss, final_accuracy = loaded_model.evaluate(X_test, y_test, verbose = 0)
print(f'Test Loss: {final_loss:.4f}')
print(f'Test Accuracy: {final_accuracy*100:.2f}%')
```

