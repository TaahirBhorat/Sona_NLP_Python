---
title: "Appendix"
---
```{python}
#| include: false
# General imports
import pickle
import nbformat
from joblib import dump, load
import os
import pandas as pd
import re
import numpy as np

# NLTK imports
import nltk
from nltk.tokenize import sent_tokenize
nltk.download('punkt')

# Visualization imports
import matplotlib.pyplot as plt
import seaborn as sns
from wordcloud import WordCloud, STOPWORDS

# Preprocessing imports
from sklearn.feature_extraction.text import CountVectorizer, ENGLISH_STOP_WORDS, TfidfVectorizer
from sklearn.preprocessing import LabelEncoder

# Model selection imports
from sklearn.model_selection import train_test_split, GridSearchCV

# Machine learning model imports
from sklearn.svm import SVC
from catboost import CatBoostClassifier
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.regularizers import l2
from tensorflow.keras.callbacks import EarlyStopping, ModelCheckpoint
from catboost import Pool, cv, CatBoostClassifier

# Word embedding imports
from gensim.models import Word2Vec

# Metrics import
from sklearn.metrics import classification_report, accuracy_score
```


# TF-IDF

## Gradient Boosted Trees

```{python}
#| echo: false
#| fig-cap: "Figure A1: TF-IDF Catboost Training and Validation Error Over Epochs"
# Read the CSV file
new_df = pd.read_csv("cv_results_over_epochs_2.csv")

plt.plot(new_df['iterations'], new_df['train-MultiClass-mean'], label='Training Error', color='b')  
plt.plot(new_df['iterations'], new_df['test-MultiClass-mean'], label='Validation Error', color='r')  

plt.xlabel('Epochs (Iterations)')
plt.ylabel('Error')

plt.legend()

plt.show()
```

## Neural Network


```{python}
#| echo: false
#| fig-cap: "Figure A2: TF-IDF Neural Network Average Training and Validation Accuracy Over Epochs"
# Load averaged accuracies from CSV
loaded_avg_accuracies = pd.read_csv('avg_accuracies_over_epochs_NN_2.csv')

plt.figure(figsize=(12, 6))
plt.plot(range(1, len(loaded_avg_accuracies['avg_train_accuracy']) + 1), loaded_avg_accuracies['avg_train_accuracy'], label='Average Training Accuracy')
plt.plot(range(1, len(loaded_avg_accuracies['avg_val_accuracy']) + 1), loaded_avg_accuracies['avg_val_accuracy'], label='Average Validation Accuracy', linestyle='dashed')

plt.xlabel('Epoch')
plt.xticks(range(1, len(loaded_avg_accuracies['avg_train_accuracy']) + 1))  # Adjust x-axis ticks to start from 1
plt.ylabel('Accuracy')
plt.legend(loc='upper left')
plt.show()
```

# Word Embeddings

## Gradient Boosted Trees

```{python}
#| echo: false
#| fig-cap: "Figure A3: Word Embeddings Catboost Training and Validation Error Over Epochs"
# Read the CSV file
new_df = pd.read_csv("cv_results_over_epochs_3.csv")
plt.plot(new_df['iterations'], new_df['train-MultiClass-mean'], label='Training Error', color='b')  
plt.plot(new_df['iterations'], new_df['test-MultiClass-mean'], label='Validation Error', color='r')  

plt.xlabel('Epochs (Iterations)')
plt.ylabel('Error')


plt.legend()
plt.show()
```

## Neural Network

```{python}
#| echo: false
#| fig-cap: "Figure A4: Word Embeddings Neural Network Average Training and Validation Accuracy Over Epochs"
# Load averaged accuracies from CSV
loaded_avg_accuracies = pd.read_csv('avg_accuracies_over_epochs_NN_3.csv')

# Plotting
plt.figure(figsize=(12, 6))
plt.plot(range(1, len(loaded_avg_accuracies['avg_train_accuracy']) + 1), loaded_avg_accuracies['avg_train_accuracy'], label='Average Training Accuracy')
plt.plot(range(1, len(loaded_avg_accuracies['avg_val_accuracy']) + 1), loaded_avg_accuracies['avg_val_accuracy'], label='Average Validation Accuracy', linestyle='dashed')
plt.xlabel('Epoch')
plt.xticks(range(1, len(loaded_avg_accuracies['avg_train_accuracy']) + 1))  #
plt.ylabel('Accuracy')
plt.legend(loc='upper left')
plt.show()
```


